# Assumptions For Phil To Consider

##Technology

1. NET Framework 4.0
2. JavaScript Framework: jQuery 1.5.1
3. CSS

- - -
### Minimum Required

1. Visual Studio 2010 - (Use Visual 2010 Express For Best Results)
2. Sql Server 2010 - (Use 2010 Express For Best Results)

- - -
## Features

1. Polymorphism

2. Made stored procedure (function import) methods virtual and return type as List<Entity>

3. Stored procedure to display all data about an employee with employee ID. This can be seen
   by clicking on the magnifying glass on any given corresponding record row or click on the edit icon
   in the far right column.

4. You can also search by Supervisor to display which employees is he the boss of. You can also
   assign a Supervisor to an employee in their detailed edit screen, assign them to yourself, and 
   finally select yourself in the drop-down to see the employee you now are the boss of.

5. Separate name space for data containers

6. LINQ queries

7. Admin, Member, and Public Role Based Authentication

- - -
## User Specs

1. Creating a new employee record

2. Read existing employee records

3. Update an existing employee record

4. Delete existing employee records

5. Role based security model

- - -
##Architecture

1. Simple 3 layer architecture (presentation, business logic and data access layer)

2. ASP.NET web form based user interface.

3. Built-in Entity Framework entities as business entities (aka: data containers)

4. Data Mapper design pattern based Data Access Layer, implemented in C# and Entity Framework

5. Usage of Data Annotations in model (entity) classes to centralize basic validation mechanism that facilitates DRY principle

6. Built-in code generators for logical layers, implemented in Visual Studio default template engine

7. Object Model for Cross Cutting Concerns (such as validation, logging, exception management)

- - -
## .NET Framework Components

1. .NET Entity Framework
2. .NET Optional/Named Parameters
3. .NET Tuple
4. .NET Extension Method
5. .NET Lambda Expressions
6. .NET Anonymous Type
7. .NET Query Expressions
8. .NET Automatically Implemented Properties
9. .NET LINQ
10. ASP.NET Grid View
11. ASP.NET Repeater
12. ASP.NET Form View
13. ASP.NET Login View
14. ASP.NET Site Map Path
15. ASP.NET Skin
16. ASP.NET Theme
17. ASP.NET Master Page
18. ASP.NET Object Data Source
19. ASP.NET Role Based Security
20. .NET Partial Classes and Methods
21. .NET Generic Type
22. .NET Nullable Type
23. ASP.NET Meta Description and Keyword Support
24. ASP.NET Routing
25. ASP.NET Grid View
26. ASP.NET Repeater
27. ASP.NET Form View
28. ASP.NET Login View
29. ASP.NET Site Map Path
30. ASP.NET Skin
31. ASP.NET Theme
32. ASP.NET Master Page
33. ASP.NET Object Data Source
34. ASP.NET Role Based Security
---



Store Procedure Using employeeID to return firstname. Obviously, you can return whatever you want but you get the point.
CREATE PROCEDURE [dbo].[GetUserName]
      @employeeID int,
      @firstName nvarchar(50) OUTPUT
      AS
      SELECT @firstName = firstName FROM Department
      WHERE employeeID = @employeeID

Store Procedure Using Salary to return employeeID. Obviously, you can return whatever you want and probably would benefit from returning first name, last name, etc but I'm really tired so hopefully you can see I get the concept.
CREATE PROCEDURE [dbo].[GetUserSalary]
      @salary int,
      @employeeID int OUTPUT
      AS
      (Recursive Loop through each ID)
      while @@rowcount <> 0
      begin
      set rowcount 0
      SELECT @employeeID = employeeID FROM Employees
      WHERE salary > @salary
      set rowcount 1
      select @employeeID = employeeID from Employees
      end
      set rowcount 0
---

> Philip: Thank you for your time and for reviewing my work. If you are to have ANY issues building or running the application, please let me know because it's working on my side. Even though I didn't have tons of time, I still think you will enjoy the application for what it is. I hope to see you at work in the near future. And just FYI: I typically only deploy the compiled .dll file to a server, especially in a production environment but I'm assuming you want to see the codebehind.