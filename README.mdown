# Assumptions For Phil To Consider

##Technology

C# 5.0
.NET Framework 4.5.1
ASP.NET MVC 5.0
Entity Framework 6.0.1
Sql Server Compact Edition
Visual Studio 2013

- - -
## Features

1. Made ObjectSet properties of database context as virtual and return type as IObjectSet 

2. Made stored procedure (function import) methods virtual and return type as List<Entity>

3. Separate name space for data containers

- - -
## User Specs

1. Creating a new employee record

2. Read existing employee records

3. Update an existing employee record

4. Delete existing employee records

5. Role based security model

- - -
##Architecture

1. Based on Model-View-Controller pattern

2. I built-in support for mobile browsers.

3. Usage of Domain Model, Repository and Unit of Work pattern from Domain Driven Development approach.

4. Several helper classes and extension methods to enable PFC developers to build application with reduced code

5. Usage of Data Annotations in model (entity) classes to centralize basic validation mechanism that facilitates DRY principle

6. Usage of IValidatableObject interface in model (entity) classes that isolates custom business logic from application layer

7. Usage of OOP inheritance and Value Object pattern in model (entity) classes that provides reusability in application architecture

8. Usage of View Model, Editor Model pattern that provides mechanism for testable view rendering logic

9. Several helper classes and extension methods to enable developers build application with reduced code
---

Store Procedure Using employeeID to return firstname. Obviously, you can return whatever you want but you get the point.
CREATE PROCEDURE [dbo].[GetUserName]
      @employeeID int,
      @firstName nvarchar(50) OUTPUT
      AS
      SELECT @firstName = firstName FROM Department
      WHERE employeeID = @employeeID

Store Procedure Using Salary to return employeeID. Obviously, you can return whatever you want and probably would benefit from returning first name, last name, etc but I'm really tired so hopefully you can see I get the concept.
CREATE PROCEDURE [dbo].[GetUserSalary]
      @salary int,
      @employeeID int OUTPUT
      AS
      (Recursive Loop through each ID)
      while @@rowcount <> 0
      begin
      set rowcount 0
      SELECT @employeeID = employeeID FROM Employees
      WHERE salary > @salary
      set rowcount 1
      select @employeeID = employeeID from Employees
      end
      set rowcount 0
---

> Philip: Thank you for your time and for reviewing my work. Even though I didn't have tons of time, I still think you will enjoy the application for what it is. I hope to see you at work in the near future.